(set-logic QF_LIA)
(define-system main 
   :input ((|__NONDET_INLINE_INIT__4__3$main#0| Int)) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main Int) (n__3$main Int) (x__1$main Int)) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) __expr5))))) 
   :trans (let ((__expr6 (= n__3$main' |__NONDET_INLINE_INIT__4__3$main#0|))) (let ((__expr7 (= x__1$main' 0))) (let ((__expr8 (and __expr7 __expr6))) (let ((__expr9 (<= 1 n__3$main'))) (let ((__expr10 (and __expr9 __expr8))) (let ((__expr11 (= __RET__$main __RET__$main'))) (let ((__expr12 (and __expr11 __expr10))) (let ((__expr13 (not _PC.2'))) (let ((__expr14 (not _PC.1'))) (let ((__expr15 (and __expr14 _PC.0'))) (let ((__expr16 (and __expr15 __expr13))) (let ((__expr17 (and __expr16 __expr12))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr18 (and __expr5 __expr17))) (let ((__expr19 (<= x__1$main n__3$main))) (let ((__expr20 (not __expr19))) (let ((__expr21 (* (- 1) x__1$main))) (let ((__expr22 (+ n__3$main __expr21))) (let ((__expr23 (<= 1 __expr22))) (let ((__expr24 (not __expr23))) (let ((__expr25 (and __expr24 __expr20))) (let ((__expr26 (= n__3$main' n__3$main))) (let ((__expr27 (and __expr26 __expr25))) (let ((__expr28 (and __expr11 __expr27))) (let ((__expr29 (= x__1$main' x__1$main))) (let ((__expr30 (and __expr29 __expr28))) (let ((__expr31 (not _PC.0'))) (let ((__expr32 (and _PC.1' __expr31))) (let ((__expr33 (and __expr13 __expr32))) (let ((__expr34 (and __expr33 __expr30))) (let ((__expr35 (and __expr2 _PC.0))) (let ((__expr36 (and __expr4 __expr35))) (let ((__expr37 (and __expr36 __expr34))) (let ((__expr38 (or __expr37 __expr18))) (let ((__expr39 (+ x__1$main' __expr21))) (let ((__expr40 (= __expr39 1))) (let ((__expr41 (and __expr40 __expr23))) (let ((__expr42 (and __expr26 __expr41))) (let ((__expr43 (and __expr11 __expr42))) (let ((__expr44 (and __expr16 __expr43))) (let ((__expr45 (and __expr44 __expr36))) (let ((__expr46 (or __expr45 __expr38))) (let ((__expr47 (and _PC.1 __expr1))) (let ((__expr48 (and __expr4 __expr47))) (let ((__expr49 (and __expr26 __expr11))) (let ((__expr50 (and __expr49 __expr29))) (let ((__expr51 (and __expr14 __expr31))) (let ((__expr52 (and __expr51 _PC.2'))) (let ((__expr53 (and __expr52 __expr50))) (let ((__expr54 (and __expr53 __expr48))) (let ((__expr55 (or __expr54 __expr46))) (let ((__expr56 (and _PC.2 __expr3))) (let ((__expr57 (and __expr52 __expr56))) (let ((__expr58 (or __expr57 __expr55))) __expr58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input ((|__NONDET_INLINE_INIT__4__3$main#0| Int)) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main Int) (n__3$main Int) (x__1$main Int)) 
   :local () 
   :reachable (rch_1 (not (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr56 (and _PC.2 __expr3))) (let ((__expr59 (not __expr56))) __expr59)))))))
   :query (qry_rch_1 (rch_1)))