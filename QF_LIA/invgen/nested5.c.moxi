(set-logic QF_LIA)
(define-system main 
   :input ((|__NONDET_INLINE_INIT__8__7$main#0| Int)) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main Int) (i__1$main Int) (j__3$main Int) (k__5$main Int) (n__7$main Int)) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) __expr5))))) 
   :trans (let ((__expr6 (= n__7$main' |__NONDET_INLINE_INIT__8__7$main#0|))) (let ((__expr7 (= i__1$main' 0))) (let ((__expr8 (and __expr7 __expr6))) (let ((__expr9 (= j__3$main' j__3$main))) (let ((__expr10 (and __expr9 __expr8))) (let ((__expr11 (= __RET__$main __RET__$main'))) (let ((__expr12 (and __expr11 __expr10))) (let ((__expr13 (= k__5$main' k__5$main))) (let ((__expr14 (and __expr13 __expr12))) (let ((__expr15 (not _PC.2'))) (let ((__expr16 (not _PC.1'))) (let ((__expr17 (and _PC.0' __expr16))) (let ((__expr18 (and __expr17 __expr15))) (let ((__expr19 (and __expr18 __expr14))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr20 (and __expr5 __expr19))) (let ((__expr21 (and __expr2 _PC.0))) (let ((__expr22 (and __expr4 __expr21))) (let ((__expr23 (= j__3$main' i__1$main))) (let ((__expr24 (<= n__7$main i__1$main))) (let ((__expr25 (not __expr24))) (let ((__expr26 (and __expr25 __expr23))) (let ((__expr27 (and __expr11 __expr26))) (let ((__expr28 (and __expr13 __expr27))) (let ((__expr29 (= n__7$main' n__7$main))) (let ((__expr30 (and __expr29 __expr28))) (let ((__expr31 (= i__1$main' i__1$main))) (let ((__expr32 (and __expr31 __expr30))) (let ((__expr33 (and _PC.0' _PC.1'))) (let ((__expr34 (and __expr33 __expr15))) (let ((__expr35 (and __expr34 __expr32))) (let ((__expr36 (and __expr35 __expr22))) (let ((__expr37 (or __expr36 __expr20))) (let ((__expr38 (* (- 1) i__1$main))) (let ((__expr39 (+ i__1$main' __expr38))) (let ((__expr40 (= __expr39 1))) (let ((__expr41 (<= n__7$main j__3$main))) (let ((__expr42 (and __expr41 __expr40))) (let ((__expr43 (and __expr9 __expr42))) (let ((__expr44 (and __expr11 __expr43))) (let ((__expr45 (and __expr13 __expr44))) (let ((__expr46 (and __expr29 __expr45))) (let ((__expr47 (and __expr18 __expr46))) (let ((__expr48 (and _PC.1 _PC.0))) (let ((__expr49 (and __expr4 __expr48))) (let ((__expr50 (and __expr49 __expr47))) (let ((__expr51 (or __expr50 __expr37))) (let ((__expr52 (= j__3$main k__5$main'))) (let ((__expr53 (not __expr41))) (let ((__expr54 (and __expr53 __expr52))) (let ((__expr55 (and __expr9 __expr54))) (let ((__expr56 (and __expr11 __expr55))) (let ((__expr57 (and __expr29 __expr56))) (let ((__expr58 (and __expr31 __expr57))) (let ((__expr59 (not _PC.0'))) (let ((__expr60 (and __expr59 __expr16))) (let ((__expr61 (and _PC.2' __expr60))) (let ((__expr62 (and __expr61 __expr58))) (let ((__expr63 (and __expr62 __expr49))) (let ((__expr64 (or __expr63 __expr51))) (let ((__expr65 (* (- 1) j__3$main))) (let ((__expr66 (+ j__3$main' __expr65))) (let ((__expr67 (= __expr66 1))) (let ((__expr68 (<= n__7$main k__5$main))) (let ((__expr69 (and __expr68 __expr67))) (let ((__expr70 (and __expr11 __expr69))) (let ((__expr71 (and __expr13 __expr70))) (let ((__expr72 (and __expr29 __expr71))) (let ((__expr73 (and __expr31 __expr72))) (let ((__expr74 (and __expr34 __expr73))) (let ((__expr75 (and _PC.2 __expr3))) (let ((__expr76 (and __expr75 __expr74))) (let ((__expr77 (or __expr76 __expr64))) (let ((__expr78 (<= i__1$main k__5$main))) (let ((__expr79 (not __expr78))) (let ((__expr80 (not __expr68))) (let ((__expr81 (and __expr80 __expr79))) (let ((__expr82 (and __expr9 __expr81))) (let ((__expr83 (and __expr11 __expr82))) (let ((__expr84 (and __expr13 __expr83))) (let ((__expr85 (and __expr29 __expr84))) (let ((__expr86 (and __expr31 __expr85))) (let ((__expr87 (and _PC.2' __expr17))) (let ((__expr88 (and __expr87 __expr86))) (let ((__expr89 (and __expr75 __expr88))) (let ((__expr90 (or __expr89 __expr77))) (let ((__expr91 (and __expr80 __expr78))) (let ((__expr92 (* (- 1) k__5$main))) (let ((__expr93 (+ k__5$main' __expr92))) (let ((__expr94 (= __expr93 1))) (let ((__expr95 (and __expr94 __expr91))) (let ((__expr96 (and __expr9 __expr95))) (let ((__expr97 (and __expr11 __expr96))) (let ((__expr98 (and __expr29 __expr97))) (let ((__expr99 (and __expr31 __expr98))) (let ((__expr100 (and __expr61 __expr99))) (let ((__expr101 (and __expr100 __expr75))) (let ((__expr102 (or __expr101 __expr90))) (let ((__expr103 (and _PC.2 __expr21))) (let ((__expr104 (and __expr9 __expr11))) (let ((__expr105 (and __expr104 __expr13))) (let ((__expr106 (and __expr105 __expr29))) (let ((__expr107 (and __expr106 __expr31))) (let ((__expr108 (and __expr59 _PC.1'))) (let ((__expr109 (and __expr108 _PC.2'))) (let ((__expr110 (and __expr109 __expr107))) (let ((__expr111 (and __expr110 __expr103))) (let ((__expr112 (or __expr111 __expr102))) (let ((__expr113 (and _PC.1 __expr1))) (let ((__expr114 (and _PC.2 __expr113))) (let ((__expr115 (and __expr109 __expr114))) (let ((__expr116 (or __expr115 __expr112))) __expr116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input ((|__NONDET_INLINE_INIT__8__7$main#0| Int)) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main Int) (i__1$main Int) (j__3$main Int) (k__5$main Int) (n__7$main Int)) 
   :local () 
   :reachable (rch_1 (not (let ((__expr1 (not _PC.0))) (let ((__expr113 (and _PC.1 __expr1))) (let ((__expr114 (and _PC.2 __expr113))) (let ((__expr117 (not __expr114))) __expr117))))))
   :query (qry_rch_1 (rch_1)))