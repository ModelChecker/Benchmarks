(set-logic QF_LIA)
(define-system main 
   :input ((|__NONDET_INLINE_INIT__6__6$main#0| Int) (|__NONDET_INLINE_INIT__8__7$main#1| Int)) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (_PC.3 Bool) (__RET__$main Int) (i__1$main Int) (j__3$main Int) (k__5$main Int) (n__7$main Int)) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr6 (not _PC.3))) (let ((__expr7 (and __expr6 __expr5))) __expr7))))))) 
   :trans (let ((__expr8 (= k__5$main' |__NONDET_INLINE_INIT__6__6$main#0|))) (let ((__expr9 (= n__7$main' |__NONDET_INLINE_INIT__8__7$main#1|))) (let ((__expr10 (and __expr9 __expr8))) (let ((__expr11 (= n__7$main' k__5$main'))) (let ((__expr12 (and __expr11 __expr10))) (let ((__expr13 (= i__1$main' 0))) (let ((__expr14 (and __expr13 __expr12))) (let ((__expr15 (= j__3$main' j__3$main))) (let ((__expr16 (and __expr15 __expr14))) (let ((__expr17 (= __RET__$main __RET__$main'))) (let ((__expr18 (and __expr17 __expr16))) (let ((__expr19 (not _PC.2'))) (let ((__expr20 (not _PC.1'))) (let ((__expr21 (and _PC.0' __expr20))) (let ((__expr22 (and __expr21 __expr19))) (let ((__expr23 (not _PC.3'))) (let ((__expr24 (and __expr23 __expr22))) (let ((__expr25 (and __expr24 __expr18))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr6 (not _PC.3))) (let ((__expr7 (and __expr6 __expr5))) (let ((__expr26 (and __expr7 __expr25))) (let ((__expr27 (and __expr2 _PC.0))) (let ((__expr28 (and __expr4 __expr27))) (let ((__expr29 (and __expr6 __expr28))) (let ((__expr30 (* (- 2) i__1$main))) (let ((__expr31 (+ j__3$main' __expr30))) (let ((__expr32 (= __expr31 0))) (let ((__expr33 (<= n__7$main i__1$main))) (let ((__expr34 (not __expr33))) (let ((__expr35 (and __expr34 __expr32))) (let ((__expr36 (and __expr17 __expr35))) (let ((__expr37 (= k__5$main' k__5$main))) (let ((__expr38 (and __expr37 __expr36))) (let ((__expr39 (= n__7$main' n__7$main))) (let ((__expr40 (and __expr39 __expr38))) (let ((__expr41 (= i__1$main' i__1$main))) (let ((__expr42 (and __expr41 __expr40))) (let ((__expr43 (not _PC.0'))) (let ((__expr44 (and __expr20 __expr43))) (let ((__expr45 (and _PC.2' __expr44))) (let ((__expr46 (and __expr23 __expr45))) (let ((__expr47 (and __expr46 __expr42))) (let ((__expr48 (and __expr47 __expr29))) (let ((__expr49 (or __expr48 __expr26))) (let ((__expr50 (* (- 1) i__1$main))) (let ((__expr51 (+ i__1$main' __expr50))) (let ((__expr52 (= __expr51 1))) (let ((__expr53 (<= n__7$main j__3$main))) (let ((__expr54 (and __expr53 __expr52))) (let ((__expr55 (and __expr15 __expr54))) (let ((__expr56 (and __expr17 __expr55))) (let ((__expr57 (and __expr37 __expr56))) (let ((__expr58 (and __expr39 __expr57))) (let ((__expr59 (and __expr24 __expr58))) (let ((__expr60 (and _PC.2 __expr3))) (let ((__expr61 (and __expr6 __expr60))) (let ((__expr62 (and __expr61 __expr59))) (let ((__expr63 (or __expr62 __expr49))) (let ((__expr64 (<= n__7$main k__5$main))) (let ((__expr65 (not __expr64))) (let ((__expr66 (not __expr53))) (let ((__expr67 (and __expr66 __expr65))) (let ((__expr68 (and __expr15 __expr67))) (let ((__expr69 (and __expr17 __expr68))) (let ((__expr70 (and __expr37 __expr69))) (let ((__expr71 (and __expr39 __expr70))) (let ((__expr72 (and __expr41 __expr71))) (let ((__expr73 (and _PC.2' __expr21))) (let ((__expr74 (and __expr23 __expr73))) (let ((__expr75 (and __expr74 __expr72))) (let ((__expr76 (and __expr61 __expr75))) (let ((__expr77 (or __expr76 __expr63))) (let ((__expr78 (<= k__5$main n__7$main))) (let ((__expr79 (not __expr78))) (let ((__expr80 (and __expr66 __expr64))) (let ((__expr81 (and __expr80 __expr79))) (let ((__expr82 (and __expr15 __expr81))) (let ((__expr83 (and __expr17 __expr82))) (let ((__expr84 (and __expr37 __expr83))) (let ((__expr85 (and __expr39 __expr84))) (let ((__expr86 (and __expr41 __expr85))) (let ((__expr87 (and _PC.1' __expr43))) (let ((__expr88 (and _PC.2' __expr87))) (let ((__expr89 (and __expr23 __expr88))) (let ((__expr90 (and __expr89 __expr86))) (let ((__expr91 (and __expr61 __expr90))) (let ((__expr92 (or __expr91 __expr77))) (let ((__expr93 (and __expr78 __expr80))) (let ((__expr94 (* (- 1) j__3$main))) (let ((__expr95 (+ j__3$main' __expr94))) (let ((__expr96 (= __expr95 1))) (let ((__expr97 (and __expr96 __expr93))) (let ((__expr98 (and __expr17 __expr97))) (let ((__expr99 (and __expr37 __expr98))) (let ((__expr100 (and __expr39 __expr99))) (let ((__expr101 (and __expr41 __expr100))) (let ((__expr102 (and __expr46 __expr101))) (let ((__expr103 (and __expr102 __expr61))) (let ((__expr104 (or __expr103 __expr92))) (let ((__expr105 (and _PC.1 __expr1))) (let ((__expr106 (and _PC.2 __expr105))) (let ((__expr107 (and __expr6 __expr106))) (let ((__expr108 (and __expr15 __expr17))) (let ((__expr109 (and __expr37 __expr108))) (let ((__expr110 (and __expr39 __expr109))) (let ((__expr111 (and __expr110 __expr41))) (let ((__expr112 (and _PC.0' _PC.1'))) (let ((__expr113 (and __expr112 _PC.2'))) (let ((__expr114 (and __expr113 __expr23))) (let ((__expr115 (and __expr114 __expr111))) (let ((__expr116 (and __expr115 __expr107))) (let ((__expr117 (or __expr116 __expr104))) (let ((__expr118 (and _PC.2 __expr27))) (let ((__expr119 (and __expr6 __expr118))) (let ((__expr120 (and __expr115 __expr119))) (let ((__expr121 (or __expr120 __expr117))) (let ((__expr122 (and _PC.1 _PC.0))) (let ((__expr123 (and _PC.2 __expr122))) (let ((__expr124 (and __expr6 __expr123))) (let ((__expr125 (and __expr114 __expr124))) (let ((__expr126 (or __expr125 __expr121))) __expr126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input ((|__NONDET_INLINE_INIT__6__6$main#0| Int) (|__NONDET_INLINE_INIT__8__7$main#1| Int)) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (_PC.3 Bool) (__RET__$main Int) (i__1$main Int) (j__3$main Int) (k__5$main Int) (n__7$main Int)) 
   :local () 
   :reachable (rch_1 (not (let ((__expr122 (and _PC.1 _PC.0))) (let ((__expr123 (and _PC.2 __expr122))) (let ((__expr6 (not _PC.3))) (let ((__expr124 (and __expr6 __expr123))) (let ((__expr127 (not __expr124))) __expr127)))))))
   :query (qry_rch_1 (rch_1)))