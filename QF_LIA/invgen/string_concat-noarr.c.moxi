(set-logic QF_LIA)
(define-system main 
   :input () 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main Int) (i__2$main Int) (j__4$main Int)) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) __expr5))))) 
   :trans (let ((__expr6 (<= 100 j__4$main'))) (let ((__expr7 (not __expr6))) (let ((__expr8 (<= 100 i__2$main'))) (let ((__expr9 (not __expr8))) (let ((__expr10 (= i__2$main' 0))) (let ((__expr11 (and __expr10 __expr9))) (let ((__expr12 (= j__4$main' 0))) (let ((__expr13 (and __expr12 __expr11))) (let ((__expr14 (and __expr13 __expr7))) (let ((__expr15 (<= 200 i__2$main'))) (let ((__expr16 (and __expr15 __expr14))) (let ((__expr17 (= __RET__$main' __RET__$main))) (let ((__expr18 (and __expr17 __expr16))) (let ((__expr19 (not _PC.1'))) (let ((__expr20 (and __expr19 _PC.0'))) (let ((__expr21 (not _PC.2'))) (let ((__expr22 (and __expr21 __expr20))) (let ((__expr23 (and __expr22 __expr18))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr24 (and __expr5 __expr23))) (let ((__expr25 (and __expr6 __expr13))) (let ((__expr26 (and __expr8 __expr10))) (let ((__expr27 (= j__4$main' j__4$main))) (let ((__expr28 (and __expr27 __expr26))) (let ((__expr29 (or __expr28 __expr25))) (let ((__expr30 (and __expr17 __expr29))) (let ((__expr31 (and _PC.1' _PC.0'))) (let ((__expr32 (and __expr31 __expr21))) (let ((__expr33 (and __expr32 __expr30))) (let ((__expr34 (and __expr5 __expr33))) (let ((__expr35 (or __expr34 __expr24))) (let ((__expr36 (and _PC.1 _PC.0))) (let ((__expr37 (and __expr4 __expr36))) (let ((__expr38 (= i__2$main' i__2$main))) (let ((__expr39 (and __expr38 __expr17))) (let ((__expr40 (and __expr39 __expr27))) (let ((__expr41 (and __expr40 __expr32))) (let ((__expr42 (and __expr41 __expr37))) (let ((__expr43 (or __expr42 __expr35))) (let ((__expr44 (and __expr2 _PC.0))) (let ((__expr45 (and __expr4 __expr44))) (let ((__expr46 (not _PC.0'))) (let ((__expr47 (and __expr19 __expr46))) (let ((__expr48 (and __expr47 _PC.2'))) (let ((__expr49 (and __expr48 __expr40))) (let ((__expr50 (and __expr49 __expr45))) (let ((__expr51 (or __expr50 __expr43))) (let ((__expr52 (and _PC.2 __expr3))) (let ((__expr53 (and __expr48 __expr52))) (let ((__expr54 (or __expr53 __expr51))) __expr54)))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input () 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main Int) (i__2$main Int) (j__4$main Int)) 
   :local () 
   :reachable (rch_1 (not (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr52 (and _PC.2 __expr3))) (let ((__expr55 (not __expr52))) __expr55)))))))
   :query (qry_rch_1 (rch_1)))