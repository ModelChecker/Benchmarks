(set-logic QF_LIA)
(define-system Age 
   :input ((_P1_ Bool)) 
   :output ((Count Int) (ite Int) (flby Int)) 
   :local () 
   :init (= flby 0) 
   :trans (and (and (=> _P1_ (= ite' (+ Count 1))) (=> (not _P1_) (= ite' 0))) (= flby' ite')) 
   :inv (= Count flby) )
(define-system Dursince 
   :input ((_P1_ Bool) (_Q_ Bool)) 
   :output ((Count Int) (ite Int) (ite2 Int) (flby Int)) 
   :local () 
   :init (= flby 0) 
   :trans (and (and (and (=> _Q_ (= ite' (+ Count 1))) (=> (not _Q_) (= ite' Count))) (and (=> _P1_ (= ite2' 0)) (=> (not _P1_) (= ite2' ite')))) (= flby' ite2')) 
   :inv (= Count flby) )
(define-system RaisingEdge 
   :input ((_P1_ Bool)) 
   :output ((res Bool) (flby Bool)) 
   :local () 
   :init (= flby false) 
   :trans (= flby' (and (not _P1_) _P1_')) 
   :inv (= res flby) )
(define-system Sofar 
   :input ((_X_ Bool)) 
   :output ((Sofar Bool) (flby Bool)) 
   :local () 
   :init (= flby _X_) 
   :trans (= flby' (and _X_' Sofar)) 
   :inv (= Sofar flby) )
(define-system main 
   :input () 
   :output ((_OK_ Bool) (env Bool) (param_leak Bool) (param__P1_ Bool)) 
   :local ((call_Age._P1_ Bool) (call_Age.Count Int) (call_Age.ite Int) (call_Age.flby Int) (call_Sofar._X_ Bool) (call_Sofar.Sofar Bool) (call_Sofar.flby Bool) (call_RaisingEdge._P1_ Bool) (call_RaisingEdge.res Bool) (call_RaisingEdge.flby Bool) (call_Age2._P1_ Bool) (call_Age2.Count Int) (call_Age2.ite Int) (call_Age2.flby Int) (call_Age3._P1_ Bool) (call_Age3.Count Int) (call_Age3.ite Int) (call_Age3.flby Int) (call_Dursince._P1_ Bool) (call_Dursince._Q_ Bool) (call_Dursince.Count Int) (call_Dursince.ite Int) (call_Dursince.ite2 Int) (call_Dursince.flby Int) (call_Age4._P1_ Bool) (call_Age4.Count Int) (call_Age4.ite Int) (call_Age4.flby Int)) 
   :init true 
   :trans true 
   :inv (and (= _OK_ (=> env (or (<= call_Age3.Count 600) (<= (* 2 call_Dursince.Count) call_Age4.Count)))) (= env (and call_Sofar.Sofar (or (not call_RaisingEdge.res) (<= 300 call_Age2.Count)))) (= call_Age._P1_ param_leak) (= call_Sofar._X_ (<= call_Age.Count 10)) (= call_RaisingEdge._P1_ param__P1_) (= call_Age2._P1_ (not param_leak)) (= call_Age3._P1_ (not param__P1_)) (= call_Dursince._P1_ param__P1_) (= call_Dursince._Q_ param_leak) (= call_Age4._P1_ (not param__P1_))) 
   :subsys (call_Age (Age call_Age._P1_ call_Age.Count call_Age.ite call_Age.flby))
   :subsys (call_Sofar (Sofar call_Sofar._X_ call_Sofar.Sofar call_Sofar.flby))
   :subsys (call_RaisingEdge (RaisingEdge call_RaisingEdge._P1_ call_RaisingEdge.res call_RaisingEdge.flby))
   :subsys (call_Age2 (Age call_Age2._P1_ call_Age2.Count call_Age2.ite call_Age2.flby))
   :subsys (call_Age3 (Age call_Age3._P1_ call_Age3.Count call_Age3.ite call_Age3.flby))
   :subsys (call_Dursince (Dursince call_Dursince._P1_ call_Dursince._Q_ call_Dursince.Count call_Dursince.ite call_Dursince.ite2 call_Dursince.flby))
   :subsys (call_Age4 (Age call_Age4._P1_ call_Age4.Count call_Age4.ite call_Age4.flby)))
(check-system main 
   :input () 
   :output ((_OK_ Bool) (env Bool) (param_leak Bool) (param__P1_ Bool)) 
   :local ((call_Age._P1_ Bool) (call_Age.Count Int) (call_Age.ite Int) (call_Age.flby Int) (call_Sofar._X_ Bool) (call_Sofar.Sofar Bool) (call_Sofar.flby Bool) (call_RaisingEdge._P1_ Bool) (call_RaisingEdge.res Bool) (call_RaisingEdge.flby Bool) (call_Age2._P1_ Bool) (call_Age2.Count Int) (call_Age2.ite Int) (call_Age2.flby Int) (call_Age3._P1_ Bool) (call_Age3.Count Int) (call_Age3.ite Int) (call_Age3.flby Int) (call_Dursince._P1_ Bool) (call_Dursince._Q_ Bool) (call_Dursince.Count Int) (call_Dursince.ite Int) (call_Dursince.ite2 Int) (call_Dursince.flby Int) (call_Age4._P1_ Bool) (call_Age4.Count Int) (call_Age4.ite Int) (call_Age4.flby Int)) 
   :reachable (rch_1 (not (= _OK_ true)))
   :query (qry_rch_1 (rch_1)))