(set-logic QF_ABV)
(define-system _UMS_ 
   :input ((on_A Bool) (on_B Bool) (on_C Bool) (ack_AB Bool) (ack_BC Bool)) 
   :output ((grant_access Bool) (grant_exit Bool) (do_AB Bool) (do_BC Bool) (empty_section Bool) (only_on_B Bool)) 
   :local () 
   :init true 
   :trans true 
   :inv (and (= grant_access (and empty_section ack_AB)) (= grant_exit (and only_on_B ack_BC)) (= do_AB (and (not ack_AB) empty_section)) (= do_BC (and (not ack_BC) only_on_B)) (= empty_section (not (or (or on_A on_B) on_C))) (= only_on_B (and on_B (not (or on_A on_C))))) )
(define-system implies 
   :input ((_A_ Bool) (_B_ Bool)) 
   :output ((AimpliesB Bool)) 
   :local () 
   :init true 
   :trans true 
   :inv (= AimpliesB (or (not _A_) _B_)) )
(define-system after 
   :input ((_A_ Bool)) 
   :output ((afterA Bool) (flby Bool)) 
   :local () 
   :init (= flby false) 
   :trans (= flby' (and _A_ afterA)) 
   :inv (= afterA flby) )
(define-system once_since 
   :input ((_C_ Bool) (_A_ Bool)) 
   :output ((onceCsinceA Bool) (ite Bool) (ite2 Bool)) 
   :local ((call_after._A_ Bool) (call_after.afterA Bool) (call_after.flby Bool)) 
   :init (=> (not call_after.afterA) (= ite true)) 
   :trans (and (=> call_after.afterA' (= ite' (or _C_' onceCsinceA))) (=> (not call_after.afterA') (= ite' true))) 
   :inv (and (and (=> _A_ (= ite2 _C_)) (=> (not _A_) (= ite2 ite))) (= onceCsinceA ite2) (= call_after._A_ _A_)) 
   :subsys (call_after (after call_after._A_ call_after.afterA call_after.flby)))
(define-system always_since 
   :input ((_B_ Bool) (_A_ Bool)) 
   :output ((alwaysBsinceA Bool) (ite Bool) (ite2 Bool)) 
   :local ((call_after._A_ Bool) (call_after.afterA Bool) (call_after.flby Bool)) 
   :init (=> (not call_after.afterA) (= ite true)) 
   :trans (and (=> call_after.afterA' (= ite' (and _B_' alwaysBsinceA))) (=> (not call_after.afterA') (= ite' true))) 
   :inv (and (and (=> _A_ (= ite2 _B_)) (=> (not _A_) (= ite2 ite))) (= alwaysBsinceA ite2) (= call_after._A_ _A_)) 
   :subsys (call_after (after call_after._A_ call_after.afterA call_after.flby)))
(define-system always_from_to 
   :input ((_B_ Bool) (_A_ Bool) (_C_ Bool)) 
   :output ((_X_ Bool)) 
   :local ((call_after._A_ Bool) (call_after.afterA Bool) (call_after.flby Bool) (call_always_since._B_ Bool) (call_always_since._A_ Bool) (call_always_since.alwaysBsinceA Bool) (call_always_since.ite Bool) (call_always_since.ite2 Bool) (call_once_since._C_ Bool) (call_once_since._A_ Bool) (call_once_since.onceCsinceA Bool) (call_once_since.ite Bool) (call_once_since.ite2 Bool) (call_implies._A_ Bool) (call_implies._B_ Bool) (call_implies.AimpliesB Bool)) 
   :init true 
   :trans true 
   :inv (and (= _X_ call_implies.AimpliesB) (= call_after._A_ _A_) (= call_always_since._B_ _B_) (= call_always_since._A_ _A_) (= call_once_since._C_ _C_) (= call_once_since._A_ _A_) (= call_implies._A_ call_after.afterA) (= call_implies._B_ (or call_always_since.alwaysBsinceA call_once_since.onceCsinceA))) 
   :subsys (call_after (after call_after._A_ call_after.afterA call_after.flby))
   :subsys (call_always_since (always_since call_always_since._B_ call_always_since._A_ call_always_since.alwaysBsinceA call_always_since.ite call_always_since.ite2))
   :subsys (call_once_since (once_since call_once_since._C_ call_once_since._A_ call_once_since.onceCsinceA call_once_since.ite call_once_since.ite2))
   :subsys (call_implies (implies call_implies._A_ call_implies._B_ call_implies.AimpliesB)))
(define-system edge 
   :input ((_X_ Bool)) 
   :output ((_Y_ Bool) (flby Bool)) 
   :local () 
   :init (= flby _X_) 
   :trans (= flby' (and _X_' (not _X_))) 
   :inv (= _Y_ flby) )
(define-system Sofar 
   :input ((_X_ Bool)) 
   :output ((Sofar Bool) (flby Bool)) 
   :local () 
   :init (= flby _X_) 
   :trans (= flby' (and _X_' Sofar)) 
   :inv (= Sofar flby) )
(define-system main 
   :input () 
   :output ((param_on_A Bool) (param_on_B Bool) (param_on_C Bool) (param_ack_AB Bool) (param_ack_BC Bool) (_OK_ Bool) (grant_access Bool) (grant_exit Bool) (do_AB Bool) (do_BC Bool) (no_collision Bool) (exclusive_req Bool) (no_derail_AB Bool) (no_derail_BC Bool) (empty_section Bool) (only_on_B Bool) (env Bool) (flby Bool) (param Bool) (flby2 Bool) (param2 Bool) (flby3 Bool)) 
   :local ((call__UMS_.on_A Bool) (call__UMS_.on_B Bool) (call__UMS_.on_C Bool) (call__UMS_.ack_AB Bool) (call__UMS_.ack_BC Bool) (call__UMS_.grant_access Bool) (call__UMS_.grant_exit Bool) (call__UMS_.do_AB Bool) (call__UMS_.do_BC Bool) (call__UMS_.empty_section Bool) (call__UMS_.only_on_B Bool) (call_always_from_to._B_ Bool) (call_always_from_to._A_ Bool) (call_always_from_to._C_ Bool) (call_always_from_to._X_ Bool) (call_always_from_to2._B_ Bool) (call_always_from_to2._A_ Bool) (call_always_from_to2._C_ Bool) (call_always_from_to2._X_ Bool) (call_edge._X_ Bool) (call_edge._Y_ Bool) (call_edge.flby Bool) (call_implies._A_ Bool) (call_implies._B_ Bool) (call_implies.AimpliesB Bool) (call_edge2._X_ Bool) (call_edge2._Y_ Bool) (call_edge2.flby Bool) (call_implies2._A_ Bool) (call_implies2._B_ Bool) (call_implies2.AimpliesB Bool) (call_edge3._X_ Bool) (call_edge3._Y_ Bool) (call_edge3.flby Bool) (call_implies3._A_ Bool) (call_implies3._B_ Bool) (call_implies3.AimpliesB Bool) (call_edge4._X_ Bool) (call_edge4._Y_ Bool) (call_edge4.flby Bool) (call_implies4._A_ Bool) (call_implies4._B_ Bool) (call_implies4.AimpliesB Bool) (call_Sofar._X_ Bool) (call_Sofar.Sofar Bool) (call_Sofar.flby Bool) (call_implies5._A_ Bool) (call_implies5._B_ Bool) (call_implies5.AimpliesB Bool) (call_always_from_to3._B_ Bool) (call_always_from_to3._A_ Bool) (call_always_from_to3._C_ Bool) (call_always_from_to3._X_ Bool) (call_always_from_to4._B_ Bool) (call_always_from_to4._A_ Bool) (call_always_from_to4._C_ Bool) (call_always_from_to4._X_ Bool)) 
   :init (and (= flby empty_section) (= flby2 true) (= flby3 true)) 
   :trans (and (= flby' true) (= param' grant_access) (= flby2' call_implies.AimpliesB') (= param2' grant_exit) (= flby3' call_implies2.AimpliesB')) 
   :inv (and (= _OK_ (=> env (and (and (and no_collision exclusive_req) no_derail_AB) no_derail_BC))) (= grant_access call__UMS_.grant_access) (= grant_exit call__UMS_.grant_exit) (= do_AB call__UMS_.do_AB) (= do_BC call__UMS_.do_BC) (= no_collision call_implies5.AimpliesB) (= exclusive_req (not (and do_AB do_BC))) (= no_derail_AB call_always_from_to3._X_) (= no_derail_BC call_always_from_to4._X_) (= empty_section (not (or (or param_on_A param_on_B) param_on_C))) (= only_on_B (and param_on_B (not (or param_on_A param_on_C)))) (= env call_Sofar.Sofar) (= call__UMS_.on_A param_on_A) (= call__UMS_.on_B param_on_B) (= call__UMS_.on_C param_on_C) (= call__UMS_.ack_AB param_ack_AB) (= call__UMS_.ack_BC param_ack_BC) (= call_always_from_to._B_ param_ack_AB) (= call_always_from_to._A_ param_ack_AB) (= call_always_from_to._C_ do_BC) (= call_always_from_to2._B_ param_ack_BC) (= call_always_from_to2._A_ param_ack_BC) (= call_always_from_to2._C_ do_AB) (= call_edge._X_ (not empty_section)) (= call_implies._A_ call_edge._Y_) (= call_implies._B_ param) (= call_edge2._X_ param_on_C) (= call_implies2._A_ call_edge2._Y_) (= call_implies2._B_ param2) (= call_edge3._X_ (not param_on_A)) (= call_implies3._A_ call_edge3._Y_) (= call_implies3._B_ param_on_B) (= call_edge4._X_ (not param_on_B)) (= call_implies4._A_ call_edge4._Y_) (= call_implies4._B_ (or param_on_A param_on_C)) (= call_Sofar._X_ (and (and (and (and (and (and (and (not (and param_ack_AB param_ack_BC)) call_always_from_to._X_) call_always_from_to2._X_) flby) flby2) flby3) call_implies3.AimpliesB) call_implies4.AimpliesB)) (= call_implies5._A_ grant_access) (= call_implies5._B_ empty_section) (= call_always_from_to3._B_ param_ack_AB) (= call_always_from_to3._A_ grant_access) (= call_always_from_to3._C_ only_on_B) (= call_always_from_to4._B_ param_ack_BC) (= call_always_from_to4._A_ grant_exit) (= call_always_from_to4._C_ empty_section)) 
   :subsys (call__UMS_ (_UMS_ call__UMS_.on_A call__UMS_.on_B call__UMS_.on_C call__UMS_.ack_AB call__UMS_.ack_BC call__UMS_.grant_access call__UMS_.grant_exit call__UMS_.do_AB call__UMS_.do_BC call__UMS_.empty_section call__UMS_.only_on_B))
   :subsys (call_always_from_to (always_from_to call_always_from_to._B_ call_always_from_to._A_ call_always_from_to._C_ call_always_from_to._X_))
   :subsys (call_always_from_to2 (always_from_to call_always_from_to2._B_ call_always_from_to2._A_ call_always_from_to2._C_ call_always_from_to2._X_))
   :subsys (call_edge (edge call_edge._X_ call_edge._Y_ call_edge.flby))
   :subsys (call_implies (implies call_implies._A_ call_implies._B_ call_implies.AimpliesB))
   :subsys (call_edge2 (edge call_edge2._X_ call_edge2._Y_ call_edge2.flby))
   :subsys (call_implies2 (implies call_implies2._A_ call_implies2._B_ call_implies2.AimpliesB))
   :subsys (call_edge3 (edge call_edge3._X_ call_edge3._Y_ call_edge3.flby))
   :subsys (call_implies3 (implies call_implies3._A_ call_implies3._B_ call_implies3.AimpliesB))
   :subsys (call_edge4 (edge call_edge4._X_ call_edge4._Y_ call_edge4.flby))
   :subsys (call_implies4 (implies call_implies4._A_ call_implies4._B_ call_implies4.AimpliesB))
   :subsys (call_Sofar (Sofar call_Sofar._X_ call_Sofar.Sofar call_Sofar.flby))
   :subsys (call_implies5 (implies call_implies5._A_ call_implies5._B_ call_implies5.AimpliesB))
   :subsys (call_always_from_to3 (always_from_to call_always_from_to3._B_ call_always_from_to3._A_ call_always_from_to3._C_ call_always_from_to3._X_))
   :subsys (call_always_from_to4 (always_from_to call_always_from_to4._B_ call_always_from_to4._A_ call_always_from_to4._C_ call_always_from_to4._X_)))
(check-system main 
   :input () 
   :output ((param_on_A Bool) (param_on_B Bool) (param_on_C Bool) (param_ack_AB Bool) (param_ack_BC Bool) (_OK_ Bool) (grant_access Bool) (grant_exit Bool) (do_AB Bool) (do_BC Bool) (no_collision Bool) (exclusive_req Bool) (no_derail_AB Bool) (no_derail_BC Bool) (empty_section Bool) (only_on_B Bool) (env Bool) (flby Bool) (param Bool) (flby2 Bool) (param2 Bool) (flby3 Bool)) 
   :local ((call__UMS_.on_A Bool) (call__UMS_.on_B Bool) (call__UMS_.on_C Bool) (call__UMS_.ack_AB Bool) (call__UMS_.ack_BC Bool) (call__UMS_.grant_access Bool) (call__UMS_.grant_exit Bool) (call__UMS_.do_AB Bool) (call__UMS_.do_BC Bool) (call__UMS_.empty_section Bool) (call__UMS_.only_on_B Bool) (call_always_from_to._B_ Bool) (call_always_from_to._A_ Bool) (call_always_from_to._C_ Bool) (call_always_from_to._X_ Bool) (call_always_from_to2._B_ Bool) (call_always_from_to2._A_ Bool) (call_always_from_to2._C_ Bool) (call_always_from_to2._X_ Bool) (call_edge._X_ Bool) (call_edge._Y_ Bool) (call_edge.flby Bool) (call_implies._A_ Bool) (call_implies._B_ Bool) (call_implies.AimpliesB Bool) (call_edge2._X_ Bool) (call_edge2._Y_ Bool) (call_edge2.flby Bool) (call_implies2._A_ Bool) (call_implies2._B_ Bool) (call_implies2.AimpliesB Bool) (call_edge3._X_ Bool) (call_edge3._Y_ Bool) (call_edge3.flby Bool) (call_implies3._A_ Bool) (call_implies3._B_ Bool) (call_implies3.AimpliesB Bool) (call_edge4._X_ Bool) (call_edge4._Y_ Bool) (call_edge4.flby Bool) (call_implies4._A_ Bool) (call_implies4._B_ Bool) (call_implies4.AimpliesB Bool) (call_Sofar._X_ Bool) (call_Sofar.Sofar Bool) (call_Sofar.flby Bool) (call_implies5._A_ Bool) (call_implies5._B_ Bool) (call_implies5.AimpliesB Bool) (call_always_from_to3._B_ Bool) (call_always_from_to3._A_ Bool) (call_always_from_to3._C_ Bool) (call_always_from_to3._X_ Bool) (call_always_from_to4._B_ Bool) (call_always_from_to4._A_ Bool) (call_always_from_to4._C_ Bool) (call_always_from_to4._X_ Bool)) 
   :reachable (rch_1 (not (= _OK_ true)))
   :query (qry_rch_1 (rch_1)))