(set-logic QF_LIA)
(define-system Sofar 
   :input ((_X_ Bool)) 
   :output ((Sofar Bool) (flby Bool)) 
   :local () 
   :init (= flby _X_) 
   :trans (= flby' (or _X_' Sofar)) 
   :inv (= Sofar flby) )
(define-system Age 
   :input ((p Bool)) 
   :output ((age_of_p Int) (ite Int) (flby Int)) 
   :local () 
   :init (= flby 0) 
   :trans (and (and (=> p (= ite' (- age_of_p 1))) (=> (not p) (= ite' 0))) (= flby' ite')) 
   :inv (= age_of_p flby) )
(define-system main 
   :input () 
   :output ((_OK_ Bool) (k Int) (env Bool) (flby Int) (param_k0 Int) (param_p Bool) (param_q Bool) (param_r Bool) (param_t Bool)) 
   :local ((call_Age.p Bool) (call_Age.age_of_p Int) (call_Age.ite Int) (call_Age.flby Int) (call_Age2.p Bool) (call_Age2.age_of_p Int) (call_Age2.ite Int) (call_Age2.flby Int) (call_Sofar._X_ Bool) (call_Sofar.Sofar Bool) (call_Sofar.flby Bool) (call_Age3.p Bool) (call_Age3.age_of_p Int) (call_Age3.ite Int) (call_Age3.flby Int)) 
   :init (= flby param_k0) 
   :trans (= flby' k) 
   :inv (and (= _OK_ (=> env (=> (>= call_Age3.age_of_p k) (and param_q param_t)))) (= k flby) (= env call_Sofar.Sofar) (= call_Age.p param_p) (= call_Age2.p param_r) (= call_Sofar._X_ (and (and (>= k 1) (=> (>= call_Age.age_of_p k) param_q)) (=> (>= call_Age2.age_of_p k) param_t))) (= call_Age3.p (and param_p param_r))) 
   :subsys (call_Age (Age call_Age.p call_Age.age_of_p call_Age.ite call_Age.flby))
   :subsys (call_Age2 (Age call_Age2.p call_Age2.age_of_p call_Age2.ite call_Age2.flby))
   :subsys (call_Sofar (Sofar call_Sofar._X_ call_Sofar.Sofar call_Sofar.flby))
   :subsys (call_Age3 (Age call_Age3.p call_Age3.age_of_p call_Age3.ite call_Age3.flby)))
(check-system main 
   :input () 
   :output ((_OK_ Bool) (k Int) (env Bool) (flby Int) (param_k0 Int) (param_p Bool) (param_q Bool) (param_r Bool) (param_t Bool)) 
   :local ((call_Age.p Bool) (call_Age.age_of_p Int) (call_Age.ite Int) (call_Age.flby Int) (call_Age2.p Bool) (call_Age2.age_of_p Int) (call_Age2.ite Int) (call_Age2.flby Int) (call_Sofar._X_ Bool) (call_Sofar.Sofar Bool) (call_Sofar.flby Bool) (call_Age3.p Bool) (call_Age3.age_of_p Int) (call_Age3.ite Int) (call_Age3.flby Int)) 
   :reachable (rch_1 (not (= _OK_ true)))
   :query (qry_rch_1 (rch_1)))