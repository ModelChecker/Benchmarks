(set-logic QF_BV)
(define-system main 
   :input () 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (cond__6$main (_ BitVec 32)) (x__1$main (_ BitVec 32)) (y__3$main (_ BitVec 32))) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) __expr5))))) 
   :trans (let ((__expr6 (= x__1$main' #b00000000000000000000000000000000))) (let ((__expr7 (= y__3$main' #b00000000000000000000000000000100))) (let ((__expr8 (and __expr7 __expr6))) (let ((__expr9 (= cond__6$main' cond__6$main))) (let ((__expr10 (and __expr9 __expr8))) (let ((__expr11 (not _PC.1'))) (let ((__expr12 (and _PC.0' __expr11))) (let ((__expr13 (not _PC.2'))) (let ((__expr14 (and __expr13 __expr12))) (let ((__expr15 (and __expr14 __expr10))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr16 (and __expr5 __expr15))) (let ((__expr17 (bvadd x__1$main y__3$main))) (let ((__expr18 (= x__1$main' __expr17))) (let ((__expr19 (bvadd #b00000000000000000000000000000100 y__3$main))) (let ((__expr20 (= y__3$main' __expr19))) (let ((__expr21 (and __expr20 __expr18))) (let ((__expr22 (= cond__6$main' #b00000000000000000000000000000001))) (let ((__expr23 (= x__1$main' #b00000000000000000000000000011110))) (let ((__expr24 (or __expr23 __expr22))) (let ((__expr25 (= cond__6$main' #b00000000000000000000000000000000))) (let ((__expr26 (not __expr25))) (let ((__expr27 (and __expr26 __expr23))) (let ((__expr28 (not __expr27))) (let ((__expr29 (and __expr28 __expr24))) (let ((__expr30 (and __expr29 __expr21))) (let ((__expr31 (and __expr25 __expr30))) (let ((__expr32 (not _PC.0'))) (let ((__expr33 (and _PC.1' __expr32))) (let ((__expr34 (and __expr13 __expr33))) (let ((__expr35 (and __expr34 __expr31))) (let ((__expr36 (and __expr2 _PC.0))) (let ((__expr37 (and __expr4 __expr36))) (let ((__expr38 (and __expr37 __expr35))) (let ((__expr39 (or __expr38 __expr16))) (let ((__expr40 (and __expr26 __expr30))) (let ((__expr41 (and __expr14 __expr40))) (let ((__expr42 (and __expr41 __expr37))) (let ((__expr43 (or __expr42 __expr39))) (let ((__expr44 (and _PC.1 __expr1))) (let ((__expr45 (and __expr4 __expr44))) (let ((__expr46 (= y__3$main' y__3$main))) (let ((__expr47 (= x__1$main' x__1$main))) (let ((__expr48 (and __expr47 __expr46))) (let ((__expr49 (and __expr48 __expr9))) (let ((__expr50 (and _PC.0' _PC.1'))) (let ((__expr51 (and __expr50 __expr13))) (let ((__expr52 (and __expr51 __expr49))) (let ((__expr53 (and __expr52 __expr45))) (let ((__expr54 (or __expr53 __expr43))) (let ((__expr55 (and _PC.1 _PC.0))) (let ((__expr56 (and __expr4 __expr55))) (let ((__expr57 (and __expr51 __expr56))) (let ((__expr58 (or __expr57 __expr54))) __expr58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input () 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (cond__6$main (_ BitVec 32)) (x__1$main (_ BitVec 32)) (y__3$main (_ BitVec 32))) 
   :local () 
   :reachable (rch_1 (not (let ((__expr55 (and _PC.1 _PC.0))) (let ((__expr4 (not _PC.2))) (let ((__expr56 (and __expr4 __expr55))) (let ((__expr59 (not __expr56))) __expr59))))))
   :query (qry_rch_1 (rch_1)))