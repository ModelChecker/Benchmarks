(set-logic QF_BV)
(define-system main 
   :input ((|__NONDET_INLINE_INIT__4__3$main#0| (_ BitVec 32))) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main (_ BitVec 32)) (n__3$main (_ BitVec 32)) (x__1$main (_ BitVec 32))) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) __expr5))))) 
   :trans (let ((__expr6 (= n__3$main' |__NONDET_INLINE_INIT__4__3$main#0|))) (let ((__expr7 (= x__1$main' #b00000000000000000000000000000000))) (let ((__expr8 (and __expr7 __expr6))) (let ((__expr9 (bvslt n__3$main' #b00000000000000000000000000000001))) (let ((__expr10 (not __expr9))) (let ((__expr11 (and __expr10 __expr8))) (let ((__expr12 (= __RET__$main __RET__$main'))) (let ((__expr13 (and __expr12 __expr11))) (let ((__expr14 (not _PC.2'))) (let ((__expr15 (not _PC.1'))) (let ((__expr16 (and __expr15 _PC.0'))) (let ((__expr17 (and __expr16 __expr14))) (let ((__expr18 (and __expr17 __expr13))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr19 (and __expr5 __expr18))) (let ((__expr20 (bvslt n__3$main x__1$main))) (let ((__expr21 (bvadd #b11111111111111111111111111111111 n__3$main))) (let ((__expr22 (bvslt __expr21 x__1$main))) (let ((__expr23 (and __expr22 __expr20))) (let ((__expr24 (= n__3$main' n__3$main))) (let ((__expr25 (and __expr24 __expr23))) (let ((__expr26 (and __expr12 __expr25))) (let ((__expr27 (= x__1$main' x__1$main))) (let ((__expr28 (and __expr27 __expr26))) (let ((__expr29 (not _PC.0'))) (let ((__expr30 (and _PC.1' __expr29))) (let ((__expr31 (and __expr14 __expr30))) (let ((__expr32 (and __expr31 __expr28))) (let ((__expr33 (and __expr2 _PC.0))) (let ((__expr34 (and __expr4 __expr33))) (let ((__expr35 (and __expr34 __expr32))) (let ((__expr36 (or __expr35 __expr19))) (let ((__expr37 (bvadd #b00000000000000000000000000000001 x__1$main))) (let ((__expr38 (= x__1$main' __expr37))) (let ((__expr39 (not __expr22))) (let ((__expr40 (and __expr39 __expr38))) (let ((__expr41 (and __expr24 __expr40))) (let ((__expr42 (and __expr12 __expr41))) (let ((__expr43 (and __expr17 __expr42))) (let ((__expr44 (and __expr43 __expr34))) (let ((__expr45 (or __expr44 __expr36))) (let ((__expr46 (and _PC.1 __expr1))) (let ((__expr47 (and __expr4 __expr46))) (let ((__expr48 (and __expr24 __expr12))) (let ((__expr49 (and __expr48 __expr27))) (let ((__expr50 (and __expr15 __expr29))) (let ((__expr51 (and __expr50 _PC.2'))) (let ((__expr52 (and __expr51 __expr49))) (let ((__expr53 (and __expr52 __expr47))) (let ((__expr54 (or __expr53 __expr45))) (let ((__expr55 (and _PC.2 __expr3))) (let ((__expr56 (and __expr51 __expr55))) (let ((__expr57 (or __expr56 __expr54))) __expr57))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input ((|__NONDET_INLINE_INIT__4__3$main#0| (_ BitVec 32))) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main (_ BitVec 32)) (n__3$main (_ BitVec 32)) (x__1$main (_ BitVec 32))) 
   :local () 
   :reachable (rch_1 (not (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr55 (and _PC.2 __expr3))) (let ((__expr58 (not __expr55))) __expr58)))))))
   :query (qry_rch_1 (rch_1)))