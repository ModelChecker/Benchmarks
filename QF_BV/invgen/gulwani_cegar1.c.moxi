(set-logic QF_BV)
(define-system main 
   :input ((|__NONDET_INLINE_INIT__2__2$main#0| (_ BitVec 32)) (|__NONDET_INLINE_INIT__4__3$main#1| (_ BitVec 32))) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main (_ BitVec 32)) (x__1$main (_ BitVec 32)) (y__3$main (_ BitVec 32))) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) __expr5))))) 
   :trans (let ((__expr6 (= x__1$main' |__NONDET_INLINE_INIT__2__2$main#0|))) (let ((__expr7 (= y__3$main' |__NONDET_INLINE_INIT__4__3$main#1|))) (let ((__expr8 (and __expr7 __expr6))) (let ((__expr9 ((_ extract 31 31) x__1$main'))) (let ((__expr10 (= __expr9 #b1))) (let ((__expr11 (not __expr10))) (let ((__expr12 (and __expr11 __expr8))) (let ((__expr13 (bvslt #b00000000000000000000000000000010 x__1$main'))) (let ((__expr14 (not __expr13))) (let ((__expr15 (and __expr14 __expr12))) (let ((__expr16 ((_ extract 31 31) y__3$main'))) (let ((__expr17 (= __expr16 #b1))) (let ((__expr18 (not __expr17))) (let ((__expr19 (and __expr18 __expr15))) (let ((__expr20 (bvslt #b00000000000000000000000000000010 y__3$main'))) (let ((__expr21 (not __expr20))) (let ((__expr22 (and __expr21 __expr19))) (let ((__expr23 (and __expr18 __expr22))) (let ((__expr24 (bvslt #b00000000000000000000000000000000 y__3$main'))) (let ((__expr25 (not __expr24))) (let ((__expr26 (and __expr25 __expr23))) (let ((__expr27 (bvslt x__1$main' #b00000000000000000000000000000100))) (let ((__expr28 (not __expr27))) (let ((__expr29 (and __expr28 __expr26))) (let ((__expr30 (and __expr28 __expr29))) (let ((__expr31 (= __RET__$main __RET__$main'))) (let ((__expr32 (and __expr31 __expr30))) (let ((__expr33 (not _PC.1'))) (let ((__expr34 (and _PC.0' __expr33))) (let ((__expr35 (not _PC.2'))) (let ((__expr36 (and __expr35 __expr34))) (let ((__expr37 (and __expr36 __expr32))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr38 (and __expr5 __expr37))) (let ((__expr39 (and __expr2 _PC.0))) (let ((__expr40 (and __expr4 __expr39))) (let ((__expr41 (= y__3$main' y__3$main))) (let ((__expr42 (and __expr41 __expr31))) (let ((__expr43 (= x__1$main' x__1$main))) (let ((__expr44 (and __expr43 __expr42))) (let ((__expr45 (and _PC.0' _PC.1'))) (let ((__expr46 (and __expr45 __expr35))) (let ((__expr47 (and __expr46 __expr44))) (let ((__expr48 (and __expr47 __expr40))) (let ((__expr49 (or __expr48 __expr38))) (let ((__expr50 (and _PC.1 _PC.0))) (let ((__expr51 (and __expr4 __expr50))) (let ((__expr52 (and __expr46 __expr51))) (let ((__expr53 (or __expr52 __expr49))) __expr53))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input ((|__NONDET_INLINE_INIT__2__2$main#0| (_ BitVec 32)) (|__NONDET_INLINE_INIT__4__3$main#1| (_ BitVec 32))) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main (_ BitVec 32)) (x__1$main (_ BitVec 32)) (y__3$main (_ BitVec 32))) 
   :local () 
   :reachable (rch_1 (not (let ((__expr50 (and _PC.1 _PC.0))) (let ((__expr4 (not _PC.2))) (let ((__expr51 (and __expr4 __expr50))) (let ((__expr54 (not __expr51))) __expr54))))))
   :query (qry_rch_1 (rch_1)))