(set-logic QF_BV)
(define-system main 
   :input ((|__NONDET_INLINE_INIT__4__3$main#0| (_ BitVec 32))) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main (_ BitVec 32)) (x__1$main (_ BitVec 32)) (y__3$main (_ BitVec 32))) 
   :local () 
   :init (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) __expr5))))) 
   :trans (let ((__expr6 (= y__3$main' |__NONDET_INLINE_INIT__4__3$main#0|))) (let ((__expr7 (= x__1$main' #b11111111111111111111111111001110))) (let ((__expr8 (and __expr7 __expr6))) (let ((__expr9 (= __RET__$main __RET__$main'))) (let ((__expr10 (and __expr9 __expr8))) (let ((__expr11 (not _PC.2'))) (let ((__expr12 (not _PC.1'))) (let ((__expr13 (and __expr12 _PC.0'))) (let ((__expr14 (and __expr13 __expr11))) (let ((__expr15 (and __expr14 __expr10))) (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr4 (not _PC.2))) (let ((__expr5 (and __expr4 __expr3))) (let ((__expr16 (and __expr5 __expr15))) (let ((__expr17 ((_ extract 31 31) x__1$main))) (let ((__expr18 (= __expr17 #b1))) (let ((__expr19 (not __expr18))) (let ((__expr20 (bvslt #b00000000000000000000000000000000 y__3$main))) (let ((__expr21 (not __expr20))) (let ((__expr22 (and __expr21 __expr19))) (let ((__expr23 (= y__3$main' y__3$main))) (let ((__expr24 (and __expr23 __expr22))) (let ((__expr25 (and __expr9 __expr24))) (let ((__expr26 (= x__1$main' x__1$main))) (let ((__expr27 (and __expr26 __expr25))) (let ((__expr28 (not _PC.0'))) (let ((__expr29 (and _PC.1' __expr28))) (let ((__expr30 (and __expr11 __expr29))) (let ((__expr31 (and __expr30 __expr27))) (let ((__expr32 (and __expr2 _PC.0))) (let ((__expr33 (and __expr4 __expr32))) (let ((__expr34 (and __expr33 __expr31))) (let ((__expr35 (or __expr34 __expr16))) (let ((__expr36 (bvadd y__3$main x__1$main))) (let ((__expr37 (= x__1$main' __expr36))) (let ((__expr38 (and __expr37 __expr18))) (let ((__expr39 (bvadd #b00000000000000000000000000000001 y__3$main))) (let ((__expr40 (= y__3$main' __expr39))) (let ((__expr41 (and __expr40 __expr38))) (let ((__expr42 (and __expr9 __expr41))) (let ((__expr43 (and __expr14 __expr42))) (let ((__expr44 (and __expr43 __expr33))) (let ((__expr45 (or __expr44 __expr35))) (let ((__expr46 (and _PC.1 __expr1))) (let ((__expr47 (and __expr4 __expr46))) (let ((__expr48 (and __expr23 __expr9))) (let ((__expr49 (and __expr48 __expr26))) (let ((__expr50 (and __expr12 __expr28))) (let ((__expr51 (and __expr50 _PC.2'))) (let ((__expr52 (and __expr51 __expr49))) (let ((__expr53 (and __expr52 __expr47))) (let ((__expr54 (or __expr53 __expr45))) (let ((__expr55 (and _PC.2 __expr3))) (let ((__expr56 (and __expr51 __expr55))) (let ((__expr57 (or __expr56 __expr54))) __expr57))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input ((|__NONDET_INLINE_INIT__4__3$main#0| (_ BitVec 32))) 
   :output ((_PC.0 Bool) (_PC.1 Bool) (_PC.2 Bool) (__RET__$main (_ BitVec 32)) (x__1$main (_ BitVec 32)) (y__3$main (_ BitVec 32))) 
   :local () 
   :reachable (rch_1 (not (let ((__expr1 (not _PC.0))) (let ((__expr2 (not _PC.1))) (let ((__expr3 (and __expr2 __expr1))) (let ((__expr55 (and _PC.2 __expr3))) (let ((__expr58 (not __expr55))) __expr58)))))))
   :query (qry_rch_1 (rch_1)))